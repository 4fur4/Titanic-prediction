q()
q()
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x, y)
x <- 1:4
y <- 2:3
x+y
c <- x+y
setwd("D:/Urko/R")
data <- read.csv("hw1_data.csv")
data
data[1:2]
data[,1:2]
data[1:2,]
nrows(data)
length(data)
nrow(data)
data[151:153,]
data[152:153,]
data[152:154,]
data$Ozone
data$Ozone[47]
length(data$Ozone)
is.na(data$Ozonene)
is.na(data$Ozone)
data$Ozone(is.na(data$Ozone))
data$Ozone[is.na(data$Ozone)]
length(data$Ozone[is.na(data$Ozone)])
length(data$Ozone[!is.na(data$Ozone)])
data$Ozone[!is.na(data$Ozone)]
mean(data$Ozone[!is.na(data$Ozone)])
help mean
help(mean)
mean(data$Ozone, na.rm= T)
data$Ozone>31
data$Ozone>31 && data$Temp>90
data$Temp>90
as.integer(data$Temp>90)
as.integer(data$Ozone>31)
x*c
tempVec <- as.integer(data$Temp>90)
ozoneVec <- as.integer(data$Ozone>31)
tempVec * ozoneVec
(data$Ozone>31) * (data$Temp>90)
(data$Ozone>31) && (data$Temp>90)
(data$Ozone>31) & (data$Temp>90)
data[(data$Ozone>31) & (data$Temp>90) ]
data[(data$Ozone>31) & (data$Temp>90)]
data[(data$Temp>90)]
data[(data$Ozone>31)]
data$Solar.R[data$Ozone>31]
data$Solar.R[data$Ozone>31 & data$Temp>90]
mean(data$Solar.R[data$Ozone>31 & data$Temp>90], na.rm= T)
data[data$Ozone>31 & data$Temp>90]
data[,data$Ozone>31 & data$Temp>90]
data[1,data$Ozone>31 & data$Temp>90]
data[1:3]
data[1:3,]
data[data$Ozone>31,]
data[data$Ozone>31 & data$Temp>90,]
data[data$Ozone>31 & data$Temp>90,]$Wind
data[data$Ozone>31 & data$Temp>90,]$Solar.R, na.rm= T)
mean(data[data$Ozone>31 & data$Temp>90,]$Solar.R, na.rm= T)
mean(data[data$Month==6,]$Solar.R, na.rm= T)
mean(data[data$Month==6,]$Temp, na.rm= T)
help(max)
max(data[data$Month==5,]$Ozone, na.rm= T)
x <- list(2, "a", "b", TRUE)
x[[2]]
class(x[[2]])
length(lass(x[[2]]))
length(class(x[[2]]))
install.packages("swirl")
library("swirl")
clean()
ls()
rm(list=ls())
swirl()
5+7
x <- 5 + 7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2 +100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2 +1000
my_div
bye()
exit()
library("swirl")
rm(list=ls())
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <-seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times= 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
c(0.5,55,-10)
num_vec<-c(0.5,55,-10)
num_vect<-c(0.5,55,-10)
num_vect<-c(0.5,55,-10, 6)
tf <- num_vect<1
tf
tf2 <- num_vect>=6
num_vect>=6
my_char <- c("My", "name","is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Urko")
my_name <-c(my_char, "Urko")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"),sep = "")
paste(LETTERS, 1:4, sep = "-")
x<-paste(LETTERS, 1:4, sep = "-")
x<-c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf/Inf
NaN
NA
0
Inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2<-c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
help(matrix())
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow =4, ncol =5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)<- cnames
my_data
swirl()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
install.packages(KernSmooth)
install.packages("KernSmooth)
install.packages("KernSmooth")
library(KernSmooth)
rm(list=ls())
load("D:/Urko/R/Kaggle/Titanic-prediction/.RData")
plot(density(trainData$Age, na.rm = TRUE))
plot(density(train$Age, na.rm = TRUE))
plot(density(test$Age, na.rm = TRUE))
plot(density(train$Age, na.rm = TRUE))
table(trainData$Survived, trainData$Sex)
table(trainData$Survived, train$Sex)
table(train$Survived, train$Sex)
barplot(counts, xlab = "Gender", ylab = "Number of People", main = "survived and deceased between male and female")
counts <-table(train$Survived, train$Sex)
barplot(counts, xlab = "Gender", ylab = "Number of People", main = "survived and deceased between male and female")
counts[2] / (counts[1] + counts[2])
counts[4] / (counts[3] + counts[4])
prop.table(table(train$Sex, train$Survived))
prop.table(table(train$Sex, train$Survived), 1)
tableProp <- prop.table(table(train$Sex, train$Survived), 1)
barplot(tableProp, xlab = "Gender", ylab = "Number of People", main = "survived and deceased between male and female")
Pclass_survival <- table(trainData$Survived, trainData$Pclass)
Pclass_survival <- table(train$Survived, train$Pclass)
tableProp <- prop.table(Pclass_survival, 1)
tableProp
Pclass_survival
prop.table(Pclass_survival)
prop.table(Pclass_survival,2)
master_vector = grep("Master.",train$Name, fixed=TRUE)
miss_vector = grep("Miss.", train$Name, fixed=TRUE)
mrs_vector = grep("Mrs.", train$Name, fixed=TRUE)
mr_vector = grep("Mr.", train$Name, fixed=TRUE)
dr_vector = grep("Dr.", train$Name, fixed=TRUE)
train$Title <- NA
View(train)
train$Title[master_vector] <- "Master"
train$Title[miss_vector] <- "Miss"
train$Title[mr_vector] <- "Mr"
train$Title[mrs_vector] <- "Mrs"
train$Title[dr_vector] <- "Dr"
View(train)
train$Name[is.na(train$Title)]
trainData$Sex = gsub("female", 1, train$Sex)
trainData$Sex = gsub("^male", 0, train$Sex)
train$Sex = gsub("female", 1, train$Sex)
train$Sex = gsub("^male", 0, train$Sex)
View(train)
train["Mother"] = NA
train["Mother"] = 2
train$Mother[train$Name == "Mrs" & train$Parch > 0]<- 1
View(train)
test["Mother"] = 2
test$Mother[test$Name == "Mrs" & test$Parch > 0]<- 1
train.glm <- glm(Survived ~ Pclass + Sex + Age + Child + Sex*Pclass + Family + Mother, family = binomial, data = train)
test["Child"] = 2
train["Child"] = 2
train$Child[train$Age<12] = 1
test$Child[test$Age<12] = 1
train.glm <- glm(Survived ~ Pclass + Sex + Age + Child + Sex*Pclass + Family + Mother, family = binomial, data = train)
train.glm <- glm(Survived ~ Pclass + Sex + Age + Child + Sex*Pclass + FamilySize + Mother, family = binomial, data = train)
p.hats <- predict.glm(train.glm, newdata = test, type = "response")
test$Sex = gsub("female", 1, train$Sex)
test$Sex = gsub("^male", 0, train$Sex)
test$Sex = gsub("female", 1, train$Sex)
test$Sex = gsub("male", 0, train$Sex)
test$Sex = gsub("female", 1, test$Sex)
test$Sex = gsub("male", 0, test$Sex)
p.hats <- predict.glm(train.glm, newdata = test, type = "response")
test$Survived<-0
test$Survived<- p.hats > .5
View(test)
test$Survived<- as.integer(test$Survived)
View(test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = "logisticRegression.csv", row.names = FALSE)
combi <- rbind(train, test)
rm(list=ls())
train <- read.csv("train.csv")
test <- read.csv("test.csv")
setwd("D:/Urko/R/Kaggle/Titanic-prediction")
rm(list=ls())
train <- read.csv("train.csv")
test <- read.csv("test.csv")
test$Survived <- NA
combi <- rbind(train, test)
combi$Name <- as.character(combi$Name)
combi$Name[1]
strsplit(combi$Name[1], split='[,.]')
strsplit(combi$Name[1], split='[,.]')[[1]]
strsplit(combi$Name[1], split='[,.]')[[1]][2]
# Engineered variable: Title
combi$Title <- strsplit(combi$Name, split='[,.]')[[1]][2]  # Won't work!
combi$Title <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
combi$Title <- sub(' ', '', combi$Title)
# Inspect new feature
table(combi$Title)
# Combine small title groups
combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
# Convert to a factor
combi$Title <- factor(combi$Title)
# Engineered variable: Family size
combi$FamilySize <- combi$SibSp + combi$Parch + 1
# Engineered variable: Family
combi$Surname <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep="")
combi$FamilyID[combi$FamilySize <= 2] <- 'Small'
# Inspect new feature
table(combi$FamilyID)
# Delete erroneous family IDs
famIDs <- data.frame(table(combi$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
combi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- 'Small'
# Convert to a factor
combi$FamilyID <- factor(combi$FamilyID)
combi$Title
as.integer(combi$Title)
combi$TitleNum <- as.integer(combi$Title)
View(combi)
is.na(combi$Fare)
combi$Fare[is.na(combi$Fare)]
?mean
combi$Fare[is.na(combi$Fare)]<- round(mean(combi$Fare,na.rm =T))
summary(combi$Embarked)
combi$Embarked[combi$Embarked=='']<-'S'
summary(combi$Embarked)
combi$EmbarkedNum<-as.integer(combi$Embarked)
min(combi$TitleNum)
combi$TitleNum[combi$TitleNum=1]
combi$TitleNum[combi$TitleNum==1]
combi$Title[combi$TitleNum==1]
combi$Sex<-as.integer(combi$Sex)
View(combi)
combi$Mother<- combi$Title == "Mrs" & combi$Parch > 0]<- 1
combi$Mother<- combi$Title == "Mrs" & combi$Parch > 0
View(combi)
combi$Mother<- as.integer(combi$Title == "Mrs" & combi$Parch > 0)
View(combi)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data=combi[!is.na(combi$Age),], method="anova")
library(rpart)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data=combi[!is.na(combi$Age),], method="anova")
library(randomForest)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data=combi[!is.na(combi$Age),], method="anova")
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age),])
combi$Child<-as.integer(combi$Child<12)
combi$Child<-as.integer(combi$Age<12)
View(train)
View(combi)
View(combi)
train <- combi[1:891,]
test <- combi[892:1309,]
train.glm <- glm(Survived ~ Pclass + Sex + Age + Child + Sex*Pclass + FamilySize + Mother+TitleNum+EmbarkedNum + Fare, family = binomial, data = train)
p.hats <- predict.glm(train.glm, newdata = test, type = "response")
test$Survived<- as.integer(p.hats > .5)
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = "logisticRegressionImproved.csv", row.names = FALSE)
library(party)
set.seed(415)
fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID + Child + Sex*Pclass + Mother,
data = train, controls=cforest_unbiased(ntree=2000, mtry=3))
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "ciforestImproved.csv", row.names = FALSE)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2 + + Child + Sex*Pclass + Mother,
data=train, importance=TRUE, ntree=2000)
which(combi$Embarked == '')
combi$Embarked[c(62,830)] = "S"
combi$Embarked <- factor(combi$Embarked)
# Fill in Fare NAs
summary(combi$Fare)
which(is.na(combi$Fare))
combi$Fare[1044] <- median(combi$Fare, na.rm=TRUE)
# New factor for Random Forests, only allowed <32 levels, so reduce number
combi$FamilyID2 <- combi$FamilyID
# Convert back to string
combi$FamilyID2 <- as.character(combi$FamilyID2)
combi$FamilyID2[combi$FamilySize <= 3] <- 'Small'
# And convert back to factor
combi$FamilyID2 <- factor(combi$FamilyID2)
train <- combi[1:891,]
test <- combi[892:1309,]
set.seed(415)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2 + Child + Sex*Pclass + Mother,
data=train, importance=TRUE, ntree=2000)
Prediction <- predict(fit, test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "firstforestImprov.csv", row.names = FALSE)
table(train$FamilyID2,train$Cabin)
train$FamilyID2[train$Cabin=='E57']
train$Name[train$Cabin=='E57']
