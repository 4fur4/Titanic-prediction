q()
q()
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x, y)
x <- 1:4
y <- 2:3
x+y
c <- x+y
setwd("D:/Urko/R")
data <- read.csv("hw1_data.csv")
data
data[1:2]
data[,1:2]
data[1:2,]
nrows(data)
length(data)
nrow(data)
data[151:153,]
data[152:153,]
data[152:154,]
data$Ozone
data$Ozone[47]
length(data$Ozone)
is.na(data$Ozonene)
is.na(data$Ozone)
data$Ozone(is.na(data$Ozone))
data$Ozone[is.na(data$Ozone)]
length(data$Ozone[is.na(data$Ozone)])
length(data$Ozone[!is.na(data$Ozone)])
data$Ozone[!is.na(data$Ozone)]
mean(data$Ozone[!is.na(data$Ozone)])
help mean
help(mean)
mean(data$Ozone, na.rm= T)
data$Ozone>31
data$Ozone>31 && data$Temp>90
data$Temp>90
as.integer(data$Temp>90)
as.integer(data$Ozone>31)
x*c
tempVec <- as.integer(data$Temp>90)
ozoneVec <- as.integer(data$Ozone>31)
tempVec * ozoneVec
(data$Ozone>31) * (data$Temp>90)
(data$Ozone>31) && (data$Temp>90)
(data$Ozone>31) & (data$Temp>90)
data[(data$Ozone>31) & (data$Temp>90) ]
data[(data$Ozone>31) & (data$Temp>90)]
data[(data$Temp>90)]
data[(data$Ozone>31)]
data$Solar.R[data$Ozone>31]
data$Solar.R[data$Ozone>31 & data$Temp>90]
mean(data$Solar.R[data$Ozone>31 & data$Temp>90], na.rm= T)
data[data$Ozone>31 & data$Temp>90]
data[,data$Ozone>31 & data$Temp>90]
data[1,data$Ozone>31 & data$Temp>90]
data[1:3]
data[1:3,]
data[data$Ozone>31,]
data[data$Ozone>31 & data$Temp>90,]
data[data$Ozone>31 & data$Temp>90,]$Wind
data[data$Ozone>31 & data$Temp>90,]$Solar.R, na.rm= T)
mean(data[data$Ozone>31 & data$Temp>90,]$Solar.R, na.rm= T)
mean(data[data$Month==6,]$Solar.R, na.rm= T)
mean(data[data$Month==6,]$Temp, na.rm= T)
help(max)
max(data[data$Month==5,]$Ozone, na.rm= T)
x <- list(2, "a", "b", TRUE)
x[[2]]
class(x[[2]])
length(lass(x[[2]]))
length(class(x[[2]]))
install.packages("swirl")
library("swirl")
clean()
ls()
rm(list=ls())
swirl()
5+7
x <- 5 + 7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2 +100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2 +1000
my_div
bye()
exit()
library("swirl")
rm(list=ls())
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <-seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times= 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
c(0.5,55,-10)
num_vec<-c(0.5,55,-10)
num_vect<-c(0.5,55,-10)
num_vect<-c(0.5,55,-10, 6)
tf <- num_vect<1
tf
tf2 <- num_vect>=6
num_vect>=6
my_char <- c("My", "name","is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Urko")
my_name <-c(my_char, "Urko")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"),sep = "")
paste(LETTERS, 1:4, sep = "-")
x<-paste(LETTERS, 1:4, sep = "-")
x<-c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf/Inf
NaN
NA
0
Inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2<-c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
help(matrix())
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow =4, ncol =5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)<- cnames
my_data
swirl()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
install.packages(KernSmooth)
install.packages("KernSmooth)
install.packages("KernSmooth")
library(KernSmooth)
setwd("D:/Urko/R/Kaggle/Titanic-prediction")
rm(list=ls())
load("D:/Urko/R/Kaggle/Titanic-prediction/.RData")
subset(combi, FamilyID != "Small")[order(subset(combi, FamilyID != "Small")$Fare),
#                                    c("Cabin", "Pclass", "FamilyID", "Fare")]
s''
subset(combi, FamilyID != "Small")[order(subset(combi, FamilyID != "Small")$Fare),
c("Cabin", "Pclass", "FamilyID", "Fare")]
subset(train, Fare > 100)[order(subset(train, Fare > 100)$Fare),
+                            c("Age", "Title", "FamilyID", "Fare")]
subset(train, Fare > 100)[order(subset(train, Fare > 100)$Fare),c("Age", "Title", "FamilyID", "Fare")]
subset(train, Fare > 100)[order(subset(train, Fare > 100)$Fare),c("", "Title", "FamilyID", "Fare")]
subset(train, Fare > 100)[order(subset(train, Fare > 100)$Fare),c("Pclass", "Title", "FamilyID", "Fare")]
subset(train, Fare > 100)[order(subset(train, Fare > 100)$Fare),c("Pclass", "Title", "Cabin", "Fare")]
combi$Name[combi$Fare>270]
subset(train, Fare > 100)[order(subset(train, Fare > 100)$Fare, subset(train, Fare > 100)$Cabin),c("Pclass", "Title", "Cabin", "Fare")]
subset(train, Fare > 100)[order(subset(train, Fare > 100)$Fare, subset(train, Fare > 100)$Cabin),c("Name", "Pclass", "Title", "Cabin", "Fare")]
combi$Cabin[391]
combi$Name[combi$Fare>400]
c(combi$Name,combi$Fare)[combi$Fare>400]
c(combi$Name,combi$Fare,combi$Cabin)[combi$Fare>400]
combi$Caib[combi$Fare==512.3292]
combi$Caib[combi$Fare=="512.3292"]
combi$Cabin[combi$Fare=="512.3292"]
which(combi$Fare=="512.3292")
summary(combi$Cabin[combi$Fare=="512.3292"])
combi$Cabin[combi$Fare==512.3292]
combi$Cabin[combi$Fare=="512.3292"]
c(combi$Name,combi$Fare,combi$Cabin)[combi$Fare>400]
c(combi$Name,combi$Fare,as.character(combi$Cabin)[combi$Fare>400]
)
c(combi$Name,combi$Fare,as.character(combi$Cabin))[combi$Fare>400]
subset(train, Fare ==0)[order(subset(train, Fare ==0)$Fare, subset(train, Fare ==0)$Cabin),c("Pclass", "Title", "Cabin", "Fare")]
subset(train, Fare ==0)[order(subset(train, Fare ==0)$Fare, subset(train, Fare ==0)$Cabin),c("Pclass", "FamilyID", "Cabin", "Fare")]
c(combi$Name,combi$Fare,as.character(combi$Cabin),as.character(combi$Ticket))[combi$Fare>400]
subset(train, Fare > 100)[order(subset(train, Fare > 100)$Fare, subset(train, Fare > 100)$Cabin),c("Ticket", "Pclass", "Title", "Cabin", "Fare")]
subset(train, Fare > 100)[order(subset(train, Fare > 100)$Fare, subset(train, Fare > 100)$Cabin),c("Ticket", "Pclass", "FamilyID", "Cabin", "Fare")]
c(combi$Name,combi$Fare,as.character(combi$Cabin))[combi$FamilyID=="5Ryerson"]
subset(train, Fare > 100)[order(subset(train, Fare > 100)$Fare, subset(train, Fare > 100)$Cabin),c("Ticket", "Name", "FamilyID", "Cabin", "Fare")]
combi$FamilyID<-as.character(combi$FamilyID)
combi$Ticket<-as.character(combi$Ticket)
combi$Cabin<-as.character(combi$Cabin)
subset(train, Fare > 100)[order(subset(train, Fare > 100)$Fare, subset(train, Fare > 100)$Cabin),c("Ticket", "Name", "FamilyID", "Cabin", "Fare")]
subset(combi, Fare > 100)[order(subset(combi, Fare > 100)$Fare, subset(combi, Fare > 100)$Cabin),c("Ticket", "Name", "FamilyID", "Cabin", "Fare")]
subset(combi, Fare > 100)[order(subset(combi, Fare > 100)$Fare, subset(combi, Fare > 100)$Cabin),c("Ticket", "FamilyID", "Cabin", "Fare")]
combi$Name[combi$Ticket=="PC 17558"]
combi$FamilySize[combi$Ticket=="PC 17558"]
library(stringr)
str_sub(inputData$Cabin[!is.na(inputData$Cabin)], -1)
str_sub(combi$Cabin[!is.na(combi$Cabin)], -1)
str_sub(combi$Cabin[!is.na(combi$Cabin)], -3)
which(is.na(combi$Cabin)
)
which(combi$Cabin=='')
str_sub(combi$Cabin[combi$Cabin==''], -3)
str_sub(combi$Cabin[combi$Cabin!=''], -3)
which(str_sub(combi$Cabin[combi$Cabin!=''], -3)=="F")
?str_sub
combi$Cabin[combi$Cabin!=''], 1)
str_sub(combi$Cabin[combi$Cabin!=''], 1)
str_sub(combi$Cabin[combi$Cabin!=''], 1,1)
combi$Deck <- substring(combi$Cabin, 1, 1)
combi$Fare
unique(combi$Fare)
combi$Deck[combi$Fare==71]
paste(combi$Deck[combi$Fare==71])
a<-paste(combi$Deck[combi$Fare==71])
typeof(a)
b<-combi$Deck[combi$Fare==71]
typeof(b)
substr(b,1,1)
substr(a,1,1)
paste(a, collapse='' )
length(is.na(combi$Deck))
length(combi)
length(combi,1)
length(combi,)
length(combi[1,])
length(combi[,1])
combi$Deck
a<- c(combi$Fare[combi$Deck!=''],combi$Deck[combi$Deck!=''])
a
subset(combi, combi$Deck!='')[c("Fare","Deck")]
lenght(subset(combi, combi$Deck!='')[c("Fare","Deck")])
length(subset(combi, combi$Deck!='')[c("Fare","Deck")])
rows(subset(combi, combi$Deck!='')[c("Fare","Deck")])
row(subset(combi, combi$Deck!='')[c("Fare","Deck")])
nrow(subset(combi, combi$Deck!='')[c("Fare","Deck")])
nrow(unique(subset(combi, combi$Deck!='')[c("Fare","Deck")]))
existDeck<-unique(subset(combi, combi$Deck!='')[c("Fare","Deck")])
length(which(combi$Deck=''))
length(which(combi$Deck==''))
combi$Deck[combi$Deck=='']
combi$Fare[combi$Deck=='']
existDeck[combi$Fare[combi$Deck=='']]
existDeck[combi$Fare[combi$Deck==''],]
names(existDeck)
existDeck[existDeck == combi$Fare[combi$Deck=='']]
existDeck[existDeck$Deck == combi$Fare[combi$Deck=='']]
existDeck$Deck == combi$Fare[combi$Deck=='']
existDeck$Fare == combi$Fare[combi$Deck=='']
existDeck
existDeck[16.7000]
existDeck[16.7000,]
existDeck$16.7000
existDeck$Deck[existDeck$Fare==16.7000]
source("llenaDeck.R")
llenaDeck(existDeck=existDeck,inputData=combi)
warnings()
nrows(existDeck)
length(existDeck)
nrows(existDeck[1,])
View(existDeck)
nrow(existDeck)
load("D:/Urko/R/Kaggle/Titanic-prediction/.RData")
subset(train, Fare > 100)[order(subset(train, Fare > 100)$Fare),
c("Age", "Title", "FamilyID", "Fare")]
View(combi)
subset(combi, Fare > 100)[order(subset(combi, Fare > 100)$Fare),
c("Age", "Title", "FamilyID", "Fare")]
subset(combi, Fare > 100)[order(subset(combi, Fare > 100)$Fare),
c("Cabin", "Title", "FamilyID", "Fare")]
combi$Deck <- substring(combi$Cabin, 1, 1)
subset(combi, Fare > 100)[order(subset(combi, Fare > 100)$Fare),
c("Deck", "Title", "FamilyID", "Fare")]
source("llenaDeck.R")
llenaDeck(existDeck=existDeck,inputData=combi)
subset(combi, Fare > 100)[order(subset(combi, Fare > 100)$Fare),
c("Deck", "Title", "FamilyID", "Fare")]
View(existDeck)
source("llenaDeck.R")
llenaDeck(existDeck=existDeck,inputData=combi)
combi<-llenaDeck(existDeck=existDeck,inputData=combi)
subset(combi, Fare > 100)[order(subset(combi, Fare > 100)$Fare),
c("Deck", "Title", "FamilyID", "Fare")]
load("D:/Urko/R/Kaggle/Titanic-prediction/.RData")
rm(list=ls())
load("D:/Urko/R/Kaggle/Titanic-prediction/.RData")
combi$Deck <- substring(combi$Cabin, 1, 1)
existDeck<-unique(subset(combi, combi$Deck!='')[c("Fare","Deck")])
length(which(combi$Deck==''))
combi<-llenaDeck(existDeck=existDeck,inputData=combi)
source("llenaDeck.R")
combi<-llenaDeck(existDeck=existDeck,inputData=combi)
length(which(combi$Deck==''))
View(combi)
combi[combi$Ticket),c("Ticket", "Deck")]
combi[order(combi$Ticket),c("Ticket", "Deck")]
combi[order(combi$Ticket),c("Pclass","Ticket", "Deck")]
clear
clear()
combi[order(combi$FamilyID),c("Pclass","FamilyID", "Deck")]
subset(combi,FamilyID != "Small")[order(subset(combi,FamilyID != "Small")$FamilyID),c("Pclass","FamilyID", "Deck")]
subset(combi,FamilyID == "3Brown")$Fare
